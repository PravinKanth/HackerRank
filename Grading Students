import java.io.*;
import java.math.*;
import java.security.*;
import java.text.*;
import java.util.*;
import java.util.concurrent.*;
import java.util.function.*;
import java.util.regex.*;
import java.util.stream.*;
import static java.util.stream.Collectors.joining;
import static java.util.stream.Collectors.toList;

class Result {


    public static List<Integer> gradingStudents(List<Integer> grades) {
        List<Integer> li=new ArrayList<>();
        for(int i:grades){
            if(i<38){
                li.add(i);
            }
            else{
                int j=0;
                if(i%5==0){
                    li.add(i);
                }
                else{
                    int dum=i;
                    boolean flag=true;
                    for(int k=1;k<=5;k++){
                        dum+=1;
                        if(dum%5==0){
                            if(dum-i<3){
                                li.add(dum);
                                flag=false;
                                break;
                            }
                        }


                    }
                    if(flag){
                        li.add(i);
                    }
                }
            }
        }
        // for(int h:li){
        //     System.out.println(h);
        // }
return li;
    }

}

public class demo {
    public static void main(String[] args) throws IOException {
        BufferedReader bufferedReader = new BufferedReader(new InputStreamReader(System.in));
        BufferedWriter bufferedWriter = new BufferedWriter(new FileWriter(System.getenv("OUTPUT_PATH")));

        int gradesCount = Integer.parseInt(bufferedReader.readLine().trim());

        List<Integer> grades = IntStream.range(0, gradesCount).mapToObj(i -> {
                    try {
                        return bufferedReader.readLine().replaceAll("\\s+$", "");
                    } catch (IOException ex) {
                        throw new RuntimeException(ex);
                    }
                })
                .map(String::trim)
                .map(Integer::parseInt)
                .collect(toList());

        List<Integer> result = Result.gradingStudents(grades);

        bufferedWriter.write(
                result.stream()
                        .map(Object::toString)
                        .collect(joining("\n"))
                        + "\n"
        );

        bufferedReader.close();
        bufferedWriter.close();
    }
}
