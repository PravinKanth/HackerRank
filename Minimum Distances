import java.io.*;
import java.math.*;
import java.security.*;
import java.text.*;
import java.util.*;
import java.util.concurrent.*;
import java.util.function.*;
import java.util.regex.*;
import java.util.stream.*;
import static java.util.stream.Collectors.joining;
import static java.util.stream.Collectors.toList;

class Result {

    
    public static int minimumDistances(List<Integer> a) {
        ArrayList<Integer> arr=new ArrayList<>();
    for(int i=0;i<a.size()-1;i++){
        for(int j=i+1;j<a.size();j++){
            if((long)a.get(i)==(long)a.get(j)){
                arr.add(Math.abs(i-j));
                break;
            }
        }
    }
    int min;
    if(arr.size()==0){
        min=-1;
    }
    else{
    min=arr.get(0);
    for(int k:arr){
        if(k<min){
            min=k;
        }
    }
    }
return min;
    }

}

public class Solution {
    public static void main(String[] args) throws IOException {
        BufferedReader bufferedReader = new BufferedReader(new InputStreamReader(System.in));
        BufferedWriter bufferedWriter = new BufferedWriter(new FileWriter(System.getenv("OUTPUT_PATH")));

        int n = Integer.parseInt(bufferedReader.readLine().trim());

        List<Integer> a = Stream.of(bufferedReader.readLine().replaceAll("\\s+$", "").split(" "))
            .map(Integer::parseInt)
            .collect(toList());

        int result = Result.minimumDistances(a);

        bufferedWriter.write(String.valueOf(result));
        bufferedWriter.newLine();

        bufferedReader.close();
        bufferedWriter.close();
    }
}
