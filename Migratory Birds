import java.io.*;
import java.math.*;
import java.security.*;
import java.text.*;
import java.util.*;
import java.util.concurrent.*;
import java.util.function.*;
import java.util.regex.*;
import java.util.stream.*;
import static java.util.stream.Collectors.joining;
import static java.util.stream.Collectors.toList;

class Result {


    public static int migratoryBirds(List<Integer> arr) {
        TreeSet<Integer> tree=new TreeSet<>();
        HashMap<Integer,Integer> map=new HashMap<>();

        for(int i:arr){
            tree.add(i);
        }
        for(int j:tree){
            int count=0;
            for(int k:arr){
                if(j==k){
                    count++;
                }
            }
            map.put(j,count);
        }
        int max=0;
        int last=0;
    for(int h:tree){
        int dum=map.get(h);
        if(dum>max){
            max=dum;
            last=h;
        }

    }
    return last;
    }

}

public class demo {
    public static void main(String[] args) throws IOException {
        BufferedReader bufferedReader = new BufferedReader(new InputStreamReader(System.in));
        BufferedWriter bufferedWriter = new BufferedWriter(new FileWriter(System.getenv("OUTPUT_PATH")));

        int arrCount = Integer.parseInt(bufferedReader.readLine().trim());

        List<Integer> arr = Stream.of(bufferedReader.readLine().replaceAll("\\s+$", "").split(" "))
                .map(Integer::parseInt)
                .collect(toList());

        int result = Result.migratoryBirds(arr);

        bufferedWriter.write(String.valueOf(result));
        bufferedWriter.newLine();

        bufferedReader.close();
        bufferedWriter.close();
    }
}
